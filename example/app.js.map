{"version":3,"sources":["webpack://ts-webpack-webapp/./node_modules/morphdom/dist/morphdom-esm.js","webpack://ts-webpack-webapp/./src/core.ts","webpack://ts-webpack-webapp/./src/index.ts","webpack://ts-webpack-webapp/./src/tag.ts","webpack://ts-webpack-webapp/webpack/bootstrap","webpack://ts-webpack-webapp/webpack/runtime/define property getters","webpack://ts-webpack-webapp/webpack/runtime/hasOwnProperty shorthand","webpack://ts-webpack-webapp/webpack/runtime/make namespace object","webpack://ts-webpack-webapp/./src/example.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C,QAAQ;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,KAAK,qDAAqD;AAC1D;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,KAAK;AACzB,oBAAoB,QAAQ;AAC5B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa,8EAA8E;AAC3F;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA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","file":"example/app.js","sourcesContent":["var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","\nimport morphdom from 'morphdom';\nimport { Tag, Content, Renderer, createRenderer } from './tag';\n\nexport type StateTransition<S> = (s: S) => StateUpdateResult<S>;\nexport type StateUpdateResult<S> = null | S | DeferredUpdate<S> | {now: S, later: DeferredUpdate<S>}\nexport type DeferredUpdate<S> = Promise<(s: S) => StateUpdateResult<S> >\n\nexport type StateEventHandler<S> = <E extends Event>(s: S, e: E) => StateUpdateResult<S>\n\n// const history: any[] = []; // for debugging\nexport async function mount<State>(el: HTMLElement, vi: View<State>, sm: StateManager<State>): Promise<void> {\n    const root = sm.render(vi(sm.state));\n    el.prepend(root);\n\n    while (true) {\n        const state = await new Promise<State>(r => {sm.trigger = r;});\n        console.log(JSON.parse(JSON.stringify(state)));\n        const newRoot = sm.render(vi(state));\n        morphdom(root, newRoot);\n    }\n}\n\nexport type View<State> = (st: State) => Tag<State>;\nexport type SubView<State> = (st: State) => Content<State>;\n\ntype StateManager<S> = {\n    state: S,\n    trigger: (s: S) => void,\n    update: (st: StateTransition<S>) => void,\n    render: Renderer<S>,\n}\n\nexport const initStateManager = <S>(start: S): StateManager<S> => {\n    let sm = {\n        state: start,\n        trigger: (s: S) => {s;},\n        update: (st) => {\n            const res = st(sm.state);\n            if (res == null) {\n            } else if (res instanceof Promise) {\n                res.then(sm.update);\n            } else if ('now' in res && 'later' in res) {\n                sm.state = res.now;\n                sm.trigger(sm.state);\n                res.later.then(sm.update);\n            } else {\n                sm.state = res;\n                sm.trigger(sm.state);\n            }\n        }\n    } as StateManager<S>;\n\n    sm.render = createRenderer(\n        (h: StateEventHandler<S>) =>\n            (e: Event) => {\n                console.log('event');\n                sm.update((s: S) => h(s,e));\n            },\n    );\n\n    return sm;\n}\n","\nexport * from './core';\nexport * from './tag';\n","// tag.ts\n// types and tools for rendering reactive html\n\nimport {StateEventHandler} from './core';\n\nexport type StateEventWrapper<S> = (h: StateEventHandler<S>) => ((e: Event) => void);\n\nexport type Tag<S> =\n    | [tag: 'hr', props: BaseProps<S>]\n    | [tag: 'br', props: BaseProps<S>]\n    | [tag: 'img', props: ImgProps<S>]\n    | [tag: 'div', props: BaseProps<S>, ...children: Content<S>[]]\n    | [tag: 'li', props: BaseProps<S>, ...children: Content<S>[]]\n    | [tag: 'td', props: BaseProps<S>, ...children: Content<S>[]]\n    | [tag: 'th', props: BaseProps<S>, ...children: Content<S>[]]\n    | [tag: 'a', props: AnchorProps<S>, ...children: Content<S>[]]\n    | [tag: 'h1', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'h2', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'h3', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'h4', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'h5', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'h6', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'i', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'b', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'em', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'pre', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'span', props: BaseProps<S>, ...children: TextChildren[]]\n    | [tag: 'ol', props: BaseProps<S>, ...children: TTag<S, 'li'>[]]\n    | [tag: 'ul', props: BaseProps<S>, ...children: TTag<S, 'li'>[]]\n    | [tag: 'table', props: BaseProps<S>, ...children: TTag<S, 'tr'>[]]\n    | [tag: 'tr', props: BaseProps<S>, ...children: TTag<S, 'td' | 'th'>[]]\n    | [tag: 'form', props: FormProps<S>, ...children: Content<S>[]]\n    | [tag: 'label', props: LabelProps<S>, ...children: (string | TTag<S, 'input'>)[]]\n    | [tag: 'input', props: InputProps<S>]\n    | [tag: 'select', props: SelectProps<S>, ...children: TTag<S, 'option'>[]]\n    | [tag: 'option', props: SelectProps<S>, child: string]\n;\n\nexport type TagTypes = Tag<any>[0];\ntype TTag<S, T extends TagTypes> = Tag<S> & [T, ...unknown[]];\ntype ITag<S, T extends TagTypes, V extends Tag<S> = Tag<S>> =\n    V extends [T, ...any] ? V : never;\n\nexport type Content<S> = (string | Tag<S> | Content<S>[]);\nexport type TextChildren = (string | TextChildren[]);\nexport type TagChildren<S, T extends TagTypes> = (TTag<S,T> | TagChildren<S,T>[])\n\ntype InferStructure<S, TagType extends TagTypes, V extends Tag<S> = Tag<S>> =\n    V extends [TagType, ...infer R] ? R : never;\n\nexport type BaseProps<S> = {\n    id?: string,\n    class?: string,\n    style?: string,\n} & {\n    [k in `on${ElementEventNames}`]?: StateEventHandler<S>\n}\n    \nexport type FormProps<S> = BaseProps<S> & {\n    method?: 'GET' | 'PUT' | 'POST',\n    action?: string,\n    name?: string,\n}\n\nexport type ImgProps<S> = BaseProps<S> & {src: string};\nexport type AnchorProps<S> = BaseProps<S> & {href: string};\nexport type LabelProps<S> = BaseProps<S> & {for?: string};\n\nexport type BaseInputProps<S> = BaseProps<S> & {\n    name?: string,\n    readonly?: 'readonly', // value will be sent on submit\n    disabled?: 'disabled', // value will not be sent on submit\n}\n\nexport type InputProps<S> = BaseInputProps<S> & ({\n    type: 'text' | 'password',\n    value?: string,\n    placeholder?: string,\n} | {\n    type: 'button' | 'color',\n    value: string,\n} | {\n    type: 'checkbox' | 'radio',\n    checked?: '',\n} | {\n    type: 'range',\n    value: number,\n    min: number,\n    max: number,\n    step?: number,\n} | {\n    type: 'color',\n    value: `#${string}`,\n} | {\n    type: 'datetime-local',\n    value: string,\n});\n\nexport type SelectProps<S> = BaseInputProps<S> & {\n    value: string | number,\n}\n\ntype ElementEventNames =\n    // general events\n    | 'select' // text was selected\n    | 'show' // a contextmenu event has reached an element with a contextmenu attribute\n    // clipboard\n    | 'copy' // the user initiates a copy action\n    | 'cut' // the user initiates a cut action\n    | 'paste' // the user initiates a paste action\n    // input events\n    | 'input'   \n    | 'change'\n    // keyboard events\n    | 'keydown'\n    | 'keyup'\n    // | 'keypress' -- deprecated\n    // mouse events\n    | 'click'\n    | 'auxclick' // an auxiliary button (not the LMB)\n    | 'dblclick' // primary button double click\n    | 'mousedown' // any button down\n    | 'mouseup' // any button up\n    | 'mouseenter' // mouse entered the element\n    | 'mouseover' // mouse entered the element or one of its children\n    | 'mousemove' // mouse moved while over an element\n    | 'mouseleave' // mouse left the element\n    | 'mouseout' // mouse left the element or one of its children\n    | 'wheel' // a mousewheel input was received\n    // touch events\n    | 'touchstart' // a touchpoint was created over this element\n    | 'touchmove' // a touch point moved over this element\n    | 'touchend' // a touch point was removed\n    | 'touchcancel' // a touchpoint has been disrupted (maybe too many touch points created)\n    // focus events\n    | 'focusin' // element will get focus\n    | 'focus' // element just got focus\n    | 'focusout' // element will lose focus\n    | 'blur' // element just lost focus\n    | 'blur' // element just lost focus\n;\n\nexport type Renderer<S> = (tag_structure: Tag<S>) => HTMLElement;\nexport const createRenderer = <S>(sew: StateEventWrapper<S>): Renderer<S> => {\n    const renderer = (tag_structure: Tag<S>): HTMLElement =>\n    {\n        const [tag, props, ...content] = tag_structure;\n        const el = document.createElement(tag);\n        for (const [attr, val] of Object.entries(props)) {\n            if (typeof val === 'string' || typeof val === 'number') {\n                if (attr === 'class') {\n                    (val as string).split(' ').map(cl => el.classList.add(cl));\n                } else {\n                    el.setAttribute(attr, val.toString());\n                }\n            } else {\n                if (attr.slice(0,2) === 'on') {\n                    el.addEventListener(attr.slice(2), sew(val));\n                } else {\n                    console.error(`attribute ignored: ${attr}`, val);\n                }\n            }\n        }\n        while (content.length > 0) {\n            const item = content.shift();\n            if (Array.isArray(item)) {\n                if (isTag<S>(item)) {\n                    el.appendChild(renderer(item));\n                } else {\n                    (content as unknown[]).unshift(...(item as unknown[]));\n                }\n            } else if (typeof item === 'string') {\n                el.appendChild(document.createTextNode(item));\n            } else {\n                console.log('What do we do with this', item);\n            }\n        }\n        return el;\n    }\n    return renderer;\n}\n\nexport function isTag<S>(thing: unknown[]): thing is Tag<S> {\n    return (typeof thing[0] === 'string' &&\n        typeof thing[1] === 'object' &&\n        !Array.isArray(thing[1]))\n}\n\ntype TagFactory<S> = {[T in TagTypes]: (...r: InferStructure<S,T>) => ITag<S, T>};\n\nexport const createTagFactory: <S>() => {[T in TagTypes]: (...r: InferStructure<S,T>) => ITag<S, T>} = (() => {\n    return new Proxy({} as {[k in TagTypes]: any}, {\n        get(t: any, k: TagTypes) {\n            if (!(k in t))\n                t[k] = (...r: unknown[]) => [k, ...r];\n            return t[k];\n        }\n    });\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {mount, initStateManager, createTagFactory, StateEventHandler, View, SubView} from './index';\n\nexport let lang = 'en';\nexport const languages = {\n    en: 'English',\n    gr: 'Ελληνικά',\n};\n\nconsole.log('HOOTY');\n\nexport type State = {\n    loading: boolean,\n    user?: UserInfo,\n    newTask: string,\n    tasks: {\n        description: string,\n        state: 'open' | 'done' | 'canceled',\n    }[],\n}\n\nexport type UserInfo = {\n    userid: string,\n    fname: string,\n    lname: string,\n}\n\nexport const userdb: Record<string,{fname: string, lname: string, pw: string}> = {\n    'geordi': {\n        fname: 'Geordi',\n        lname: 'Filiotis',\n        pw: '123',\n    },\n    'lucas': {\n        fname: 'Lucas',\n        lname: 'Desoto',\n        pw: '321',\n    },\n}\n\nexport const init = (): State => ({\n    loading: false,\n    user: undefined,\n    newTask: '',\n    tasks: [{\n        state: 'open',\n        description: 'Get this bloody thing working'\n    }],\n});\n\nconst stateManager = initStateManager(init());\nconst tag = createTagFactory<State>();\n\n// View\nconst {div, hr, input, form, label} = tag;\n\nconst main: View<State> = (s) => {\n    console.log('view')\n    return div({class: 'root'},\n        (s.user === undefined) ? login(s) : [\n            `Welcome ${s.user.fname} ${s.user.lname}`,\n            hr({}),\n            input({type: 'text', value: s.newTask, oninput: editNewTask}),\n            input({type: 'button', value: 'Do it!', onclick: commitNewTask}),\n            hr({}),\n            s.tasks.map((task,i) => {\n                if (task.state === 'open')\n                    return div({class: 'task ' + task.state},\n                        input({type: 'button', value: '✔', \n                            onclick: (s,_) => {s.tasks[i].state = 'done'; return s;}\n                        }),\n                        input({type: 'button', value: '❌',\n                            onclick: (s,_) => {s.tasks[i].state = 'canceled'; return s;}\n                        }),\n                        ' - ',\n                        task.description,\n                    )\n                else return '';\n            }),\n            hr({}),\n            s.tasks.map((task) => {\n                if (task.state !== 'open')\n                    return div({class: 'task ' + task.state}, task.description);\n                else return '';\n            }),\n        ]\n    )\n};\n\nconst editNewTask: StateEventHandler<State> =\n(s, {target}: any) => {\n    const v = target.value;\n    return {...s, newTask: v};\n}\n\nconst commitNewTask: StateEventHandler<State> = (s,_) => {\n    s.tasks.push({\n        state: 'open',\n        description: s.newTask,\n    });\n    s.newTask = '';\n    return s;\n}\n\n(async ()=>{\n    while(true) {\n        await new Promise(r => setTimeout(r,5000));\n        console.log('saved');\n        stateManager.update(s => {\n            if (s.user !== undefined) {\n                const lst = window.localStorage;\n\n                lst.setItem(s.user.userid, JSON.stringify(s.tasks));\n            }\n            return null;\n        })\n    }\n})();\n\nexport const login: SubView<State> = (_) => [\n    'Please Log In ',\n    hr({}),\n    form({},\n        div({}, label({}, 'Username: ',\n            input({type: 'text', name: 'userid'}),\n        )),\n        div({}, label({}, 'Password: ',\n            input({type: 'password', name: 'password'}),\n        )),\n        input({type: 'button', value: 'Go!', onclick: tryLogin}),\n    )\n];\n\nconst tryLogin: StateEventHandler<State> = async (_, {target}: any) => {\n    const result = await doLogin(target.form.userid.value, target.form.password.value)\n    return s => {\n        s.user = result;\n        const t = JSON.parse(window.localStorage.getItem(result.userid));\n        if (t !== null)\n            s.tasks = t;\n        return s;\n    }\n}\n\nasync function doLogin(username: string, password: string): Promise<UserInfo | undefined> {\n    await new Promise(r => setTimeout(r, 1000));\n    if (username in userdb && userdb[username].pw === password)\n        return {\n            userid: username,\n            fname: userdb[username].fname,\n            lname: userdb[username].lname,\n        };\n    else\n        return undefined;\n}\n\nmount(document.body, main, stateManager);\n\nconst u = async function*(s: number) {\n    while (s < 10) {\n        await new Promise(r => setTimeout(r,1000));\n        s = yield s;\n    }\n    return s;\n}\n\nconst waity = async function*(s: string) {\n    let n = s.length;\n    while (n > 1) {\n        await new Promise(r => setTimeout(r,100));\n        if (n % 2) {\n            n = (3*n)+1;\n        } else {\n            n /= 2;\n        }\n        s = yield n;\n        n = s.length;\n    }\n    return true;\n};\n\n\n(async () => {\n    const r1 = waity('well hello there how are you?');\n    let x: {value: any, done?: boolean} = {value:null};\n    while ((x = await r1.next(x.value)) && !x.done) {\n        console.log(x.value);\n    }\n    console.log(r1);\n\n    const r2 = waity('things are kinda great right now');\n    for await (const z of r2) {\n        console.log(z);\n    }\n});\n"],"sourceRoot":""}